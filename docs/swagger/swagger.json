{
    "swagger": "2.0",
    "info": {
        "description": "Code Challenge | 2DCH7-20059",
        "title": "Pars Tasmim",
        "contact": {
            "name": "Erfan Derakhshani",
            "url": "https://something.com",
            "email": "techerfan@gmail.com"
        },
        "version": "1.0"
    },
    "basePath": "/api",
    "paths": {
        "/reservations/book": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "book a table",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservation"
                ],
                "summary": "book a table",
                "parameters": [
                    {
                        "description": "payload",
                        "name": "\"payload\"",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ReservationBookRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.ReservationBookResponse"
                        }
                    },
                    "400": {
                        "description": "bad request"
                    },
                    "401": {
                        "description": "unauthorized"
                    },
                    "406": {
                        "description": "not acceptable"
                    },
                    "500": {
                        "description": "internal error"
                    }
                }
            }
        },
        "/reservations/cancel": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "cancel a reservation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservation"
                ],
                "summary": "cancel a reservation",
                "parameters": [
                    {
                        "description": "payload",
                        "name": "\"payload\"",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ReservationCancelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ReservationCancelResponse"
                        }
                    },
                    "400": {
                        "description": "bad request"
                    },
                    "401": {
                        "description": "unauthorized"
                    },
                    "406": {
                        "description": "not acceptable"
                    },
                    "500": {
                        "description": "internal error"
                    }
                }
            }
        },
        "/tables/add": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new table",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "table"
                ],
                "summary": "Add a new table",
                "parameters": [
                    {
                        "description": "payload",
                        "name": "\"payload\"",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TableAddRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.TableAddResponse"
                        }
                    },
                    "400": {
                        "description": "bad request"
                    },
                    "401": {
                        "description": "unauthorized"
                    },
                    "406": {
                        "description": "not acceptable"
                    },
                    "500": {
                        "description": "internal error"
                    }
                }
            }
        },
        "/tables/all": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all tables",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "table"
                ],
                "summary": "Get all tables",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TableAllResponse"
                        }
                    },
                    "400": {
                        "description": "bad request"
                    },
                    "401": {
                        "description": "unauthorized"
                    },
                    "406": {
                        "description": "not acceptable"
                    },
                    "500": {
                        "description": "internal error"
                    }
                }
            }
        },
        "/tables/remove": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a table",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "table"
                ],
                "summary": "Delete a table",
                "parameters": [
                    {
                        "description": "payload",
                        "name": "\"payload\"",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TableRemoveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TableRemoveResponse"
                        }
                    },
                    "400": {
                        "description": "bad request"
                    },
                    "401": {
                        "description": "unauthorized"
                    },
                    "406": {
                        "description": "not acceptable"
                    },
                    "500": {
                        "description": "internal error"
                    }
                }
            }
        },
        "/tables/timetable": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the timetable",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "table"
                ],
                "summary": "Get the timetable",
                "parameters": [
                    {
                        "type": "string",
                        "name": "dt",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TableTimetableResponse"
                        }
                    },
                    "400": {
                        "description": "bad request"
                    },
                    "401": {
                        "description": "unauthorized"
                    },
                    "406": {
                        "description": "not acceptable"
                    },
                    "500": {
                        "description": "internal error"
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "login",
                "parameters": [
                    {
                        "description": "payload",
                        "name": "\"payload\"",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserLoginResponse"
                        }
                    },
                    "400": {
                        "description": "bad request"
                    },
                    "401": {
                        "description": "unauthorized"
                    },
                    "406": {
                        "description": "not acceptable"
                    },
                    "500": {
                        "description": "internal error"
                    }
                }
            }
        },
        "/users/logout": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "logout",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "logout",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserLogoutResponse"
                        }
                    },
                    "400": {
                        "description": "bad request"
                    },
                    "401": {
                        "description": "unauthorized"
                    },
                    "406": {
                        "description": "not acceptable"
                    },
                    "500": {
                        "description": "internal error"
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "payload",
                        "name": "\"payload\"",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserRegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserRegisterResponse"
                        }
                    },
                    "400": {
                        "description": "bad request"
                    },
                    "401": {
                        "description": "unauthorized"
                    },
                    "406": {
                        "description": "not acceptable"
                    },
                    "500": {
                        "description": "internal error"
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.Reservation": {
            "type": "object",
            "properties": {
                "end_dt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_canceled": {
                    "type": "boolean"
                },
                "number_of_seats": {
                    "type": "integer"
                },
                "receipt_id": {
                    "type": "integer"
                },
                "start_dt": {
                    "type": "string"
                },
                "table_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.ReservationBookRequest": {
            "type": "object",
            "properties": {
                "end_dt": {
                    "type": "string"
                },
                "number_of_seats": {
                    "type": "integer"
                },
                "start_dt": {
                    "type": "string"
                }
            }
        },
        "dto.ReservationBookResponse": {
            "type": "object",
            "properties": {
                "price": {
                    "type": "integer"
                },
                "reservation_id": {
                    "type": "integer"
                },
                "seats": {
                    "type": "integer"
                },
                "table_number": {
                    "type": "integer"
                }
            }
        },
        "dto.ReservationCancelRequest": {
            "type": "object",
            "properties": {
                "reservation_id": {
                    "type": "integer"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "dto.ReservationCancelResponse": {
            "type": "object"
        },
        "dto.Table": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "table_number": {
                    "type": "integer"
                }
            }
        },
        "dto.TableAddRequest": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "table_number": {
                    "type": "integer"
                }
            }
        },
        "dto.TableAddResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "dto.TableAllResponse": {
            "type": "object",
            "properties": {
                "tables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Table"
                    }
                }
            }
        },
        "dto.TableRemoveRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "dto.TableRemoveResponse": {
            "type": "object"
        },
        "dto.TableTimetable": {
            "type": "object",
            "properties": {
                "reservations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Reservation"
                    }
                },
                "table_number": {
                    "type": "integer"
                }
            }
        },
        "dto.TableTimetableResponse": {
            "type": "object",
            "properties": {
                "timetables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TableTimetable"
                    }
                }
            }
        },
        "dto.UserLoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.UserLoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.UserLogoutResponse": {
            "type": "object"
        },
        "dto.UserRegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "$ref": "#/definitions/entity.Gender"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "dto.UserRegisterResponse": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "entity.Gender": {
            "type": "string",
            "enum": [
                "male",
                "female"
            ],
            "x-enum-varnames": [
                "Male",
                "Female"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}